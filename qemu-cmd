qemu-system-x86_64 -nographic -no-reboot -kernel arch/x86_64/boot/bzImage -m size=512 -initrd ./../busybox/test_build/rootfs_bb.gz -append "panic=1 console=ttyS0 rdinit=/bin/sh"



-no-reboot => dont reboot but exit
-nographic => on this tty only dont open a new window
-kernel	   => bzImage of kernel to boot
-initrd    => initial ramdisk from which to boot (cpio)
-m	   => give different ram size params
		size=512 (size of ram given)
-append    => the kernel commandline 
		panic	=> reboot on panic
		console => throw ouptut from serial interface
		rdinit  => instead of init look for /bin/sh


Creating a cpio :

find . | cpio -o -H newc | gzip > name_of_cpio.gz
make sure you compile statically

Extracting a cpio :
mkdir target; cd target
cpio -idv < /path/random.cpio

As an added bonus just add go src code to make it a fully functional dev env
To quit from qemu [Ctrl-A X]

####### To mount Proc ######

mount -t proc none proc



#### Incase of chroots #####

cd /mnt/arch # or where you are preparing the chroot dir

mount -t proc proc proc/
mount -t sysfs sys sys/
mount -o bind /dev dev/


#### Mount dev ######

mount -t devtmpfs dev /dev
